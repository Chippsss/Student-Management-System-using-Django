from django.db import models

# Create your models here.

class Academic(models.Model):
    year = models.CharField(max_length=20, unique=True)
    
    def __str__(self):
        return f"{self.year}"
###########################################################################################   

class Branch(models.Model):
    name = models.CharField(max_length=30, unique=True) 
    code = models.CharField(max_length=10, unique=True)
    
    def __str__(self):
        return f"{self.code}: {self.name}"
###########################################################################################       

    

class Student(models.Model):
    
    id = models.CharField(max_length=15, primary_key=True)
    first = models.CharField(max_length=64)
    last = models.CharField(max_length=64)
    email = models.EmailField(default=None)
    prn = models.BigIntegerField(default=None)
    # academic = models.CharField(max_length=15, null=True, choices=YEAR_CHOICES, help_text="Choose Your current year")
    # branch = models.CharField(max_length=50, null=True, choices=BRANCH_CHOICES, help_text="Choose your branch")
    
    academic = models.ForeignKey(Academic, on_delete=models.SET_NULL, null=True, blank=True, related_name="students_in_year", help_text="Choose the student's current academic year")
    
    branch = models.ForeignKey(Branch, on_delete=models.SET_NULL, null=True, blank=True, related_name="students_in_branch", help_text="choose the student's branch")
    
    def __str__(self):
        return (f"{self.id}: {self.first} {self.last} {self.prn} {self.academic} {self.branch}")
###########################################################################################   
    
    
class Course(models.Model):
    name = models.CharField(max_length=30)
    code = models.CharField(max_length=10)
    branch = models.ForeignKey(Branch, on_delete=models.CASCADE, related_name="courses")
    academic = models.ForeignKey(Academic, on_delete=models.CASCADE, related_name="courses_offered")
    students_enrolled = models.ManyToManyField(Student, related_name="enrolled_course", blank=True)
    
    def __str__(self):
        return f"{self.code} - {self.name} ({self.branch.name}, {self.academic_year.year})"
###############################################################################################
    
    
class Grade(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='grades')
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='grades_received')
    score = models.DecimalField(max_digits=5, decimal_places=2) # e.g., 85.50
    grade_letter = models.CharField(max_length=5, blank=True, null=True)
    
    def __str__(self):
        return f"{self.student.first} {self.student.last} - {self.course.code}: {self.score}"

###############################################################################################

class Attendance(models.Model):
    """Records attendance for a student in a course on a specific date."""
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='attendance_records')
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='attendance_taken')
    date = models.DateField()
    is_present = models.BooleanField(default=True)

    def __str__(self):
        status = "Present" if self.is_present else "Absent"
        return f"{self.student.first} {self.student.last} - {self.course.code} on {self.date}: {status}"

    
class Assignment(models.Model):
    """Represents an assignment for a course."""
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='assignments')
    due_date = models.DateTimeField()
    max_score = models.DecimalField(max_digits=5, decimal_places=2)

    def __str__(self):
        return f"{self.title} ({self.course.code})"